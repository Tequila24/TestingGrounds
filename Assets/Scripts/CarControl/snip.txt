    void ApplyStrutConstraint()
    {
        Vector3 localWheelPos = wheelBody.transform.position - carBody.transform.position;
        Vector3 strutVector = carBody.rotation * (strutTopPoint - strutBottomPoint);
        Vector3 offsetFromRestPoint = carBody.rotation * localRestPoint - localWheelPos;
        Vector3 horizontalOffsetFromStrut = GetHOffset();


        Vector3 relativeVelocity = wheelBody.velocity - carBody.GetRelativePointVelocity(localWheelPos);
        Vector3 horizontalVelocityToStrut = Vector3.ProjectOnPlane(relativeVelocity, strutVector);
        Vector3 verticalVelocityToStrut = Vector3.Project(relativeVelocity, strutVector);


        // HORIZONTAL
        if ( Vector3.Angle(offsetFromRestPoint, horizontalVelocityToStrut) > 90) {
            wheelBody.velocity -= horizontalVelocityToStrut * 0.5f;
            carBody.AddForceAtPosition(horizontalVelocityToStrut * 0.5f * Time.deltaTime, carBody.position + carBody.rotation * localRestPoint, ForceMode.VelocityChange);
        }

        Vector3 offsetForce = horizontalOffsetFromStrut * 5 * 0.5f;
        wheelBody.AddForce(offsetForce, ForceMode.VelocityChange);
        carBody.AddForceAtPosition(-offsetForce, carBody.position + carBody.rotation * localRestPoint, ForceMode.VelocityChange);




        // VERTICAL
        Vector3 positionOnStrut = Quaternion.FromToRotation(strutVector, Vector3.up) * Vector3.Project(offsetFromRestPoint, strutVector);

        if (positionOnStrut.y > StrutToTop)
        {
            if (Vector3.Angle(offsetFromRestPoint, verticalVelocityToStrut) > 90) {
                wheelBody.velocity -= verticalVelocityToStrut;
                carBody.AddForceAtPosition(verticalVelocityToStrut * 0.5f * Time.deltaTime, carBody.position + carBody.rotation * localRestPoint, ForceMode.VelocityChange);
            }

            Vector3 verticalOffsetFromStrut = GetVOffset();
            wheelBody.AddForce(verticalOffsetFromStrut, ForceMode.VelocityChange);
        } else
        if (positionOnStrut.y < StrutToBottom)
        {
            if (Vector3.Angle(offsetFromRestPoint, verticalVelocityToStrut) > 90) {
                wheelBody.velocity -= verticalVelocityToStrut;
                carBody.AddForceAtPosition(verticalVelocityToStrut * 0.5f * Time.deltaTime, carBody.position + carBody.rotation * localRestPoint, ForceMode.VelocityChange);
            }

            Vector3 verticalOffsetFromStrut = GetVOffset();
            wheelBody.AddForce(verticalOffsetFromStrut, ForceMode.VelocityChange);
        }


        Debug.DrawRay( wheelBody.position, GetHOffset() + GetVOffset(), Color.magenta, Time.deltaTime);
    }


    void ApplyStrutConstraint()
    {
        Vector3 wheelVerticalOffset = Vector3.zero;
        Vector3 wheelHorizontalOffset = Vector3.zero;


        Vector3 localWheelPos = wheelBody.transform.position - carBody.transform.position;
        Vector3 wheelOffset = (localWheelPos - carBody.rotation * localRestPoint);
        wheelHorizontalOffset = Vector3.ProjectOnPlane(wheelOffset, carBody.rotation * (strutTopPoint - strutBottomPoint) );
        wheelBody.position -= wheelHorizontalOffset;

        Vector3 relativeWheelVelocity = wheelBody.velocity - carBody.GetPointVelocity(carBody.position + carBody.rotation * localRestPoint);
        Vector3 horizontalPartVelocity = Vector3.ProjectOnPlane(relativeWheelVelocity, carBody.rotation * (strutTopPoint - strutBottomPoint) );
        wheelBody.velocity -= horizontalPartVelocity;

        Debug.DrawRay(carBody.position + carBody.rotation * localRestPoint, horizontalPartVelocity, Color.red, Time.deltaTime);
        



        Vector3 wheelPositionOnStrut =  Quaternion.FromToRotation( carBody.rotation * (strutTopPoint - strutBottomPoint), Vector3.up) * 
                                        wheelOffset - wheelHorizontalOffset;

        if (wheelPositionOnStrut.y <= StrutToBottom) 
        {
            wheelVerticalOffset = localWheelPos - carBody.rotation * strutBottomPoint;
            wheelBody.position -= wheelVerticalOffset;

            Debug.DrawRay(carBody.position + carBody.rotation * strutBottomPoint, wheelVerticalOffset, Color.magenta, Time.deltaTime);
        }
        if (wheelPositionOnStrut.y >= StrutToTop) 
        {
            wheelVerticalOffset = localWheelPos - carBody.rotation * strutTopPoint;
            Debug.DrawRay(carBody.position + carBody.rotation * strutTopPoint, wheelVerticalOffset, Color.magenta, Time.deltaTime);
        }
        wheelBody.position -= wheelVerticalOffset;
        Vector3 verticalPartVelocity = relativeWheelVelocity - horizontalPartVelocity;
        wheelBody.velocity -= verticalPartVelocity;

        
        
        
        Debug.DrawRay(carBody.position + carBody.rotation * localRestPoint, wheelHorizontalOffset, Color.blue, Time.deltaTime);
    }



    void GenerateRaycastVectors()
    {
        wheelWidth = this.gameObject.GetComponent<MeshRenderer>().bounds.extents.x;
        wheelRadius = this.gameObject.GetComponent<MeshRenderer>().bounds.extents.z;

        for (float j = -wheelWidth; j <= wheelWidth; j += (wheelWidth*2)/widthAccuracy)
        {
            

            for (int i = 0; i < radialAccuracy; i++)
            {
                Quaternion rotation = Quaternion.AngleAxis(360/radialAccuracy * i, this.transform.right);
                Vector3 vec = rotation *    (this.transform.up * wheelRadius) + 
                                            (new Vector3(j, 0, 0));

                raycastVectors.Add(vec);
            }
        }

        Debug.Log(raycastVectors.Count);
    }



    void CastRays()
    {
        List<RaycastHit> rayHits = new List<RaycastHit>();

        foreach (Vector3 vector in raycastVectors)
        {
            RaycastHit hit;
            if ( Physics.Raycast(this.transform.position, vector, out hit, wheelRadius) ) 
            {
                rayHits.Add(hit);
            }
        }

        foreach (RaycastHit hit in rayHits)
        {
            Vector3 pointVelocity = wheelBody.GetPointVelocity(hit.point);
            float cosAngle = Mathf.Cos(Vector3.Angle(pointVelocity, hit.normal) * Mathf.Deg2Rad);
            Debug.Log(cosAngle);
            Vector3 normalForce = wheelMass * pointVelocity * cosAngle;

            wheelBody.AddForceAtPosition(normalForce, this.transform.position);

            Debug.DrawRay(hit.point, normalForce, Color.red, 10);
        }
    }


    void ApplyForces()
    {
        CalculateSuspension();


    }


    void CalculateSuspension()
    {
        Vector3 localWheelPos = wheelBody.transform.position - carBody.transform.position;
        Vector3 wheelOffset = (localWheelPos - carBody.rotation * localRestPoint);

        // do not let wheels move anywhere except axis
        Vector3 horizontalOffset = Vector3.ProjectOnPlane(wheelOffset, carBody.transform.up);
        wheelBody.AddForce(-horizontalOffset * wheelMass, ForceMode.VelocityChange);


        // rotation correction
        Quaternion deltaRotation = Quaternion.FromToRotation(this.transform.right, carBody.transform.right);
        //this.transform.rotation = Quaternion.Lerp(this.transform.rotation, deltaRotation;
        this.transform.rotation = deltaRotation * this.transform.rotation;




        // spring force
        Vector3 verticalOffset = wheelOffset - horizontalOffset;
        Vector3 springForce = verticalOffset * springValue;
        wheelBody.AddForce(-springForce * 0.5f);
        carBody.AddForceAtPosition(springForce * 0.5f, carBody.position + carBody.rotation * localRestPoint);


        // damping force
        Vector3 carPointVelocity = carBody.GetRelativePointVelocity(localRestPoint);
        Vector3 wheelVelocity = wheelBody.velocity;
        Vector3 relativeVelocity = wheelVelocity - carPointVelocity;
        Vector3 dampingAcceleration = relativeVelocity * dampingValue;
        wheelBody.AddForce(-dampingAcceleration * 0.5f * Time.deltaTime, ForceMode.VelocityChange);
        carBody.AddForceAtPosition(dampingAcceleration * 0.5f * Time.deltaTime, carBody.position + carBody.rotation * localRestPoint, ForceMode.VelocityChange);



        Debug.DrawRay(wheelBody.position, relativeVelocity, Color.blue, Time.deltaTime);
        Debug.DrawRay(carBody.position + carBody.rotation * localRestPoint, -springForce, Color.red, Time.deltaTime);
        Debug.DrawRay(carBody.position + carBody.rotation * localRestPoint, horizontalOffset, Color.yellow, Time.deltaTime);
    }




counter = counter>100 ? 0 : (counter+1);

        strutVector = (carBody.rotation * (strutTopPoint - strutBottomPoint)).normalized;
        
        Vector3 offsetFromRestPoint = carBody.rotation * localRestPoint - (wheelBody.position - carBody.position);
        
        Vector3 positionFix = Vector3.zero;


        // velocity alternation
        Vector3 offsetFromRestPointVert = Vector3.Project(offsetFromRestPoint, strutVector);
        Vector3 springForce = offsetFromRestPointVert * springValue;
        Vector3 springAcceleration = (springForce / wheelMass) * Time.deltaTime;
        wheelVelocity += springAcceleration;
        wheelVelocity = GetDampedVelocity(wheelVelocity);


        Vector3 positionInNextFrame = wheelBody.position + wheelVelocity;

        Vector3 depenetrationInNextFrame = GetAllignedDepenetration(positionInNextFrame);
        if (depenetrationInNextFrame.sqrMagnitude > 0) {
            positionFix += depenetrationInNextFrame;
        }

        Vector3 HOffset = GetHOffsetForPos(positionInNextFrame - carBody.position);
        Vector3 VOffset = GetVOffsetForPos(positionInNextFrame - carBody.position);
        positionFix -= HOffset;

        wheelBody.position += wheelVelocity + positionFix;



        // CAR PART
        carBody.AddForceAtPosition(-springForce / carBody.mass, wheelBody.position, ForceMode.VelocityChange);

        Vector3 carRestPointVelocity = carBody.GetPointVelocity(carBody.position + carBody.rotation * localRestPoint); 

        //remove slide and torque
        if (depenetrationInNextFrame.sqrMagnitude > 0) {
            Vector3 carRelativeVelocity = Vector3.Project(carRestPointVelocity, strutVector) - wheelVelocity;
            //carRelativeVelocity = GetDampedVelocity(carRelativeVelocity);
            carBody.AddForceAtPosition(-carRelativeVelocity * Time.deltaTime, carBody.position + carBody.rotation * localRestPoint, ForceMode.VelocityChange);


            Vector3 carSideVelocity = Vector3.ProjectOnPlane(carRestPointVelocity, depenetrationInNextFrame) * tractionValue;
            Debug.DrawRay(wheelBody.position, carSideVelocity * 100, Color.magenta, Time.deltaTime, false);
            carBody.AddForceAtPosition(-carSideVelocity * Time.deltaTime, carBody.position + carBody.rotation * localRestPoint, ForceMode.VelocityChange);
            //carBody.AddTorque(carBody.angularVelocity * )
        }
        
    }

        //Debug.DrawRay(carBody.position + localRestPoint - wheelBody.right*0.4f + wheelBody.forward*0.01f * counter + wheelBody.forward*0.0f, depenetrationInNextFrame * 10, Color.yellow, (100*0.02f), false);
        //Debug.DrawRay(carBody.position + localRestPoint - wheelBody.right*0.4f + wheelBody.forward*0.01f * counter + wheelBody.forward*0.05f, wheelVelocity * 10, Color.red, (100*0.02f), false);